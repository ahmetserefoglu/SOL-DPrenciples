Solid Principles

Geliştirilen yazılımın esnek,yeniden kullanılabilir,sürdürülebilir ve anlaşılır olmasını sağlayan, kod tekrarını
önleyen ve Prensibler.
* Geliştirdiğimiz yazılımın gelecekte gereksinimlere kolayca adapte olmasını
* Yeni özellikleri kodda bir değişikliğe gerek kalmadan kolayca ekleyebildiğimiz
* Yeni gereksinimlere karşın kodun üzerinde en az değişimi sağlaması
* Kod üzerinde sürekli düzeltme hatta yeniden yazma gibi sorunların yol açtığı zaman kaybını da minumuma indirmektedir.

*** İyi KOD PRENSİBİNE uygun Kod geliştirmemiz gereklidir.***

KATMANLI MİMARİLER
3- Katmanlı 

Data Access Layer : 
Bu katmanda sadece veritabanı işlemleri yapılmaktadır. Bu katmanın görevi veriyi ekleme, silme, güncelleme ve veritabanından çekme işlemidir.
Bu katmanda bu işlemlerden başka herhangi bir işlem yapılmamaktadır.
Select, İnsert , Update , Update , Truncate , Drop komutları bu katmanda yazılır

Business Layer : 
Bu katmanda iş yüklerimizi yazıyoruz. 
Öncelikle şunu söylemeliyim bu katman Data Access tarafından projeye çekilmiş olan verileri alarak işleyecek olan katmandır. 
Biz uygulamalarımızda Data Access katmanını direk olarak kullanmayız. 
Araya Business katmanını koyarak bizim yerimize Business’ın yapmasını sağlarız. 
Kullanıcıdan gelen veriler öncelikle Business katmanına gider oradan işlenerek Data Access katmanına aktarılır. 
Bu katmanda ayrıca bu verilere kimlerin erişeceğini belirtiyoruz. 
Örneğin IT ve Muhasebe bölümü var. 
IT bölümünün veri tabanına ekleme işlemleri yapmasını istiyoruz ama Muhasebe bölümünün sadece verileri çekmesini istiyorsak 
bunu Business Katmanında gerçekleştiriyoruz.

**İş kodları burada yazılır Örneğin ; kredi verme konusunda bir sorun varmı burada bir kontrol yapılır.
Veritabanina bir bak bir sorun varmı.

 

Presentation Layer: 
Bu katman kullanıcı ile etkileşimin yapıldığı katmandır. 
Burası Windows form da olabilir, Web’te olabilir veya Bir Consol uygulamasida olabilir. 
Burada temel amac kullaniciya verileri göstermek ve kullanıcıdan gelen verileri Business Katmanı ile Data Access’e iletmektir.


UI Table göstermek istersek bunu bu katmanda yapabiliriz.

Entities : 
Arkadaşlar temeldeki 3 katmanı inceledik. 
Entities Katmanında ise genelde domain olarak adlandırılan classlarımızı tanımlıyoruz. 
Bu Entities katmanının ismini domain olarakta değiştirebilirsiniz veya Common katmanıda yapabilirsiniz. 
Ben Entities ismini tercih ediyorum. 
Bu katmanda proje boyunca kullanacağımız ana classlarımızı belirliyoruz yani gerçek nesnelerimizi belirlediğimiz yer burası. 
Daha anlaşılabilir bir şekilde anlatmak için birkaç örnek vereyim. 
Örneğin bir Stok veritabını sistemi yapmak istiyorsunuz. 
Bu sistemde Ürün bilgileriniz, Kategori bilgileriniz ve Satış bilgilerinizin olduğunu varsayalım. 
İşte bu bilgilerinizi burada tanımlıyorusunuz. 
Ürün classınız içerisinde Property olarak ÜrünAdı, ÜrünID si, ÜrünStokMiktari gibi, ÜrünFiyatı gibi propertyler olabilir. 
Bu katmanı hem Data Access hem Business hemde Presentation katmanı kullanmaktadır.


Yardımcı Katmanlar,

Servis Katmanı

Yeni arayüz sistemi eklendiğinde bir sisteme ihtiyaç duyduğumuzda busines katmanlı iletişime geçemiyor diller farklı
Araya Bir REST servis yazarız. WEB API, 



1- SingleResponsibility

Data Katmanı
Business Katmanı 
MVC Katmanı

** Katmanlı mimarilerde katmanlar arası dikkat edilmeyen kodlama mantığı

Context'ler içerisinde bir metotun içerisinde birden fazla işlem yapılmaz.

MVC'de çağırdığın zaman problem yatıyor

Metot'lar içerisinde birden fazla işlem yapmamalıyız.



/**Yorum Satırına Aldıklarım Hatalı Uygulamadır Dikkate Almayınız */


/**AOP */
//AOP nedir? Neden kullanmalıyız ?
//Kullandığımız yazılım dilleri sadece tek yazılım geliştirme yaklaşımını desteklemez.
//Birden fazla yaklaşımı uygulayarak kolay, kullanılabilir, esnek, okunabilir, çok kafa yormayan, bakımı kolay kod yazabilmemizi 
//amaçlar. 
//Object Oriented Programming (OOP) tabanlı dillerde yapılan işler davranışlarına göre sınıflara, paketlere ayrılarak yönetmeyi 
//amaçlar. Fakat bu sınıflar arasında yapılan bazı işler davranışsal olarak birbirine benzeme eğilimindedir.
//Örnek vermek gerekirse veritabanı işlemlerinden sorumlu olan paketimiz içinde log tutma ihtiyacı duyuyorken network işlemlerinden sorumlu olan paketimizde log tutma ihtiyacı duyabiliyoruz. İki pakette de böyle bir ihtiyacın olması davranışsal olarak benzer işlerin yapılmasına neden olur. OOP, Separation of Concerns’i (ilgi-davranışların ayrılmasını) amaçlamasına rağmen bu gibi durumlarda isteklerimize cevap vermemektedir. 
//AOP bu gibi problemlerde OOP’yi tamamlayan bir teknik olarak karşımıza çıkar. En çok ;
//Kayıt tutma (Logging)
//Doğrulama (Validation)
//Ön bellekleme (Caching)
//Hata Ayıklama (Exception Handling)
//Yetkilendirme (Authorizing)
//Performans Yönetimi
//Transaction Yönetimi
//Pooling
//gibi işlemlerinde AOP’i kullanabiliyoruz.


/** LOOSELY COUPLED */

// Insan denilen class, construction aşamasında IBesin adı verilen interface’e
// ihtiyaç duyuyor. Bu interface “TemelBesinOgeleriniSagla()” adlı bir
// fonksiyonaliteye sahip ve bu interface’in implement edildiği herhangi bir
// class, bu fonksiyonu sahip olduğu özelliklerle zenginleştiriyor. En
// nihayetinde Insan, bu fonksiyonu çağırıp ihtiyaçlarını karşılayabiliyor.
// https://medium.com/@selcukusta/sen-loosely-coupled-iken-yaz%C4%B1l%C4%B1m%C4%B1n-neden-olmas%C4%B1n-50bf9ef7ccd1
// https://medium.com/@hakanyucel/javascript-ve-aspect-oriented-programming-a4fdecc7c91b

/** REFERANS TİPLERİ */
//Değer Tipleri: “int”, “long”, “float”, “double”, “decimal”, “char”, “bool”, “byte”, “short”, “struct”, “enum”
// Referans Tipleri: “string”, “object”, “class”, “interface”, “array”, “delegate”, “pointer”
// C#’da Değer Tipleri ve Referans Tipler olarak iki veri tipi vardır. Bu veri
// tiplerini ayıran özellik ise bellekte tutulma şekilleridir. C# belleği iki
// bölge olarak kullanır. Bunlardan biri Stack(Yığın) diğeri ise Heap(Öbek)’dir.
// Stack Heap’den daha hızlıdır. Peki bu Değer ve Referans tipler, bahsettiğimiz
// belleği nasıl kullanıyor, hemen bakalım.
// değer tipindeki veri tipleri ile bir değişken tanımlandığında değişkenin
// değeri Stack adı verilen bellek bölgesinde tutulur.
//Referans tipindeki veri tipinde bir değişken tanımlandığında ise değişkenin değeri Heap bölgesinde ve Heap bölgesindeki değeri gösteren adres değeri ise Stack bölgesinde tutulur. Referans tipindeki bir değişkene bellekte yer ayırırken de “new” anahtar kelimesi kullanılır.
//Kabaca yukarıda bahsettiklerimi örnek üzerinde anlatmak gerekirse;
//int a = 2; //stack’de a değişkeni için yer açıldı ve değeri 2 atandı
//int b = a; //stack’de b değişkeni için yer açıldı ve değeri a’nın değeri //olan atandı (klonlandı)
//Bu durumda çıktı:
//a= 2 ve b=2 olur
//a=3; //bu durumda sadece b’nin değeri değişir.
//Bu duumda çıktı:
//a=3 ve b=2 olur
//Bu işlemde b’nin a’nın değerinin değişmesinden etkilenmemesinin sebebi bellekte değerleriyle tutulmaları ve değişim olursa kendi değerlerinin değişmesi oldu.
//Referans tipindeki aynı işlemin sonuçlarına bakalım.
//int[] a = {1,2,3,4,5};
//int[] b = a;
//Bu durumda çıktı:
//a = 1,2,3,4,5 ve b = 1,2,3,4,5 olur.
//→ Burada aslında b’nin değerleri için Heap’de alan yaratılmadı. Stack’de a’nın tuttuğu adresi b’ye eşitlemiş olduk. Dolayısıyla artık a ve b aynı adrese sahip ve aynı değerleri gösteriyorlar.
//a[0] = 9;
//Bu durumda çıktı:
//a = 9,2,3,4,5 ve b=9,2,3,4,5 olur.
//Çünkü bahsettiğimiz gibi aynı adresi gösteriyorlar.
//object c = new object(); //heap’de c için yer açıldı ve c’nin Heap’deki değerini gösteren adres Stack’e yazıldı.




// Mvc projesi arayüz koyduk yarın başka bir api yazarsak orayada o kodlarıda gömmek mantıklı değil
// Backendde Bir IOC containerden destek alacağız.

//Dependency Inversion
// Bir Katman başka bir katmana gevşek bağlı olmalı
//Bir managerin yani iki classs arasında da bağlantı kurabiliriz

// Yeni Bir Veritabani tanımlaması yaparak işlemlerimizi yaparsak if else
// durumundan kurtulmamız gerek bu şekilde doğru bir kod
// yazılımı kabul görmemektedir.

// Burada yazılan işlemlere çok dikkat etmelisin
/*
 * class CustomerDal implements ICustomerDal {
 * 
 * 
 * public void Add(final Database database) { //EntityCode if(database ==
 * Database.Mysql) {
 * 
 * System.out.println("Added to Mysql database");
 * 
 * }else if(database == Database.Oracle) {
 * 
 * System.out.println("Added to Oracle database");
 * 
 * }else{
 * 
 * System.out.println("Added to SqlServer database"); }
 * 
 * }
 * 
 * 
 * }
 */

 API GATEWAY